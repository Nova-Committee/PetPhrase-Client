buildscript {
    repositories {
        mavenCentral()
        maven {
            url = "https://jcenter.bintray.com/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}
configurations {
    embed
    compile.extendsFrom(embed)
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'idea'

version = "${version}"
group = "committee.nova.petphrase" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "PetPhrase-Forge-1.7.10"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.compileJava.dependsOn compileScala
tasks.compileScala.dependsOn.remove("compileJava")

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "idea"
}

dependencies {
    compile files("$sourceSets.main.scala.outputDir")
}

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

def yourMixinConfig = 'mixins.petphrase.json'
def refMapForYourConfig = 'mixins.petphrase.refmap.json'
def relativePathToMixinAP = 'libs/mixin-0.8-SNAPSHOT.jar'

repositories {
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
    embed('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes.put("TweakClass", "org.spongepowered.asm.launch.MixinTweaker")
        attributes.put("FMLCorePluginContainsFMLMod", true)
        attributes.put("ForceLoadAsMod", true)
        attributes.put("MixinConfigs", yourMixinConfig)
    }

    // embed libraries in jar
    from configurations.embed.collect {
        exclude '**/LICENSE.txt'
        it.isDirectory() ? it : zipTree(it)
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    def fixedRelPathToAP = relativePathToMixinAP
    if (fixedRelPathToAP.startsWith('./') || fixedRelPathToAP.startsWith('.\\')) {
        fixedRelPathToAP = fixedRelPathToAP.substring(2)
    } else if (fixedRelPathToAP.startsWith('/') || fixedRelPathToAP.startsWith('\\')) {
        fixedRelPathToAP = fixedRelPathToAP.substring(1)
    }

    tasks.compileJava {
        println "Path: " + projectDir.absolutePath
        options.compilerArgs += [
                // There's a bug in the AnnotationProcessor for 0.7.11 that will generate the annotations pointing to the parent class instead of subclass
                // resulting in the mixin not being applied.  This is fixed in 0.8, however 0.8 needs guava > 21.0, and minecraft ships with 17.0.
                // So as a hacky workaround... ship with 0.7.11, but use the AP from 0.8 for compiling
                "-processorpath", projectDir.absolutePath + '/' + fixedRelPathToAP,
                "-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
                "-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
                "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
        ]
    }
}

sourceSets {
    main {
        scala {
            outputDir = file("$buildDir/classes/scala/main")
        }
        java {
            outputDir = file("$buildDir/classes/java/main")
        }
        ext.refMap = refMapForYourConfig
    }
}